//	Category.java - Represent a category in the Timelines data model.import java.awt.Color;import java.io.*;class Category extends Object implements Serializable {	//	Public contants.		//	Constants.	protected static final int PORTABLE_STREAM_VERSION = 4;		//  Cut in 2/29/00	protected static final int OLD_STREAM_VERSION = 3;	public static final Color DEFAULT_BODY_COLOR = Color.white;		//	Instance variables.	protected LabelInfo iLabelInfo;				//	Various label information	Color iColor;							//	Color to display category in	//	Trivial accessors -------------------------------------------------------------	protected void setLabelInfo(LabelInfo li)			{ iLabelInfo = li;}	protected LabelInfo getLabelInfo()					{ return iLabelInfo; }	protected void setColor(Color c)					{ iColor = c;		}	protected Color getColor()						{ return iColor;		}			//	Constructor for reading from byte stream ---------------------------------------	public Category(DataInputStream is) throws IOException {		switch (is.readShort()) {			case PORTABLE_STREAM_VERSION:				iLabelInfo = new LabelInfo(is.readUTF(), is.readUTF(), is.readBoolean());				iColor = new Color(is.readFloat(), is.readFloat(), is.readFloat(), is.readFloat());				break;							case OLD_STREAM_VERSION:				iLabelInfo = new LabelInfo(is.readUTF(), is.readUTF(), is.readBoolean());				iColor = DEFAULT_BODY_COLOR;				break;						default:				Debug.assert(false);		}	}			public Category(String label, String notes, boolean locked, Color c){		iLabelInfo = new LabelInfo(label, notes, locked);		iColor = c;	}				public Category(Category other){		LabelInfo otherLabelInfo = other.getLabelInfo();		iLabelInfo = new LabelInfo(otherLabelInfo.getLabel(), otherLabelInfo.getNotes(), otherLabelInfo.isLocked());		iColor = other.iColor;	}			//	Default constructor.  Can be used only by subclasses.	protected Category(){	}			//	Write this category to a DataOutputStream.	public void writeTo(DataOutputStream os) throws IOException {		os.writeShort(PORTABLE_STREAM_VERSION);		os.writeUTF(iLabelInfo.getLabel());		os.writeUTF(iLabelInfo.getNotes());		os.writeBoolean( iLabelInfo.isLocked());		float[] colorComponents = iColor.getComponents(null);		os.writeFloat(colorComponents[0]);		os.writeFloat(colorComponents[1]);		os.writeFloat(colorComponents[2]);		os.writeFloat(colorComponents[3]);	}					//	Overrides of standard methods.	public String toString()						{ return iLabelInfo.getLabel();}}