//	TLEvent.java - Represent events in Timeline's data modelimport java.io.*;class TLEvent extends TimePeriod implements Serializable {	// 	Constants ------------------------------------------------------------------------	protected static final int PORTABLE_STREAM_VERSION = 7;	//	Instance fields.	protected long iStart;				//	Millis of starting moment	protected long iEnd;				//	Millis of ending moment		//	Construtor for creating from constituent parts.	public TLEvent(long start, long end){		set(start, end);	}			//	Constructor for creating from a Macintosh input stream.	public TLEvent(MacInputStream is) throws IOException {			Debug.assert(is.readShort() == 5);			//	Version number of TDataObj part		is.readShort();							//	2 unused bytes		is.readMacString();						//	Discard label		is.readMacString();						//	Discard notes		is.readInt();							//	Discard category set		is.readMacBoolean();						//	Discard lock				Debug.assert(is.readShort() == 2);			//	Version number of Event part		long start = is.readMacMoment();		long end = is.readMacMoment();		is.readInt();							//	4 bytes unused		set(start, end);	}			//	Constructor for creating from another TLEvent.	//	??	Should callers use clone() instead?	public TLEvent(TLEvent other){		set(other.iStart, other.iEnd);	}			//	Constructor for creating from a data input stream.	public TLEvent(DataInputStream is) throws IOException {			Debug.assert(is.readShort() == PORTABLE_STREAM_VERSION);  	//	verify version		long start = is.readLong();		long end = is.readLong();		set(start, end);	}			//	Method for writing to a data input stream.	public void writeTo(DataOutputStream os) throws IOException {		os.writeShort(PORTABLE_STREAM_VERSION);  			os.writeLong(iStart);		os.writeLong(iEnd);	}			//	Set from a pair of long's.  The constructors call this to centralize error checking.	protected void set(long start, long end){		Debug.assert(end >= start);		iStart = start;		iEnd = end;	}		//	Implement TimePeriod abstract methods.	public long getPeriodStart() 			{ return iStart;}	public long getPeriodEnd()				{ return iEnd;}	public void setPeriodStart(long m)		{ Debug.assert(m <= iEnd);  iStart = m;}	public void setPeriodEnd(long m)			{ Debug.assert(iStart <= m);  iEnd = m;}}