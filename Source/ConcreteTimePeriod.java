//	ConcreteTimePeriod.java - Simple implementation of TimePeriod using millis.import java.io.Serializable;public class ConcreteTimePeriod extends TimePeriod implements Serializable {		//	Instance fields.	protected long iStart;			//	Millis of starting moment	protected long iEnd;				//	Millis of ending moment		//	Constructor for creating from another TimePeriod.	public ConcreteTimePeriod(TimePeriod other) {		iStart = other.getPeriodStart();		iEnd = other.getPeriodEnd();		Debug.assert(iEnd >= iStart);	}			//	Constructor for building from two milli values.	public ConcreteTimePeriod(long begin, long end) {		iStart = begin;		iEnd = end;		Debug.assert(iEnd >= iStart);	}			//	Constructor for building an uninitialized period.	//	We set the values to violate the usual constraints, to try to catch uninitialized uses.	//	??	This may be unused, and it's not clear whether it is a good idea.	public ConcreteTimePeriod(){		iStart = Long.MAX_VALUE;		iEnd = Long.MIN_VALUE;	}			//	Implement TimePeriod abstract methods.	//	??	Do we want to add debugging code to the setters that checks the invariants?	public long getPeriodStart() 			{ return iStart;}	public long getPeriodEnd()				{ return iEnd;}	public void setPeriodStart(long m)		{ iStart = m;}	public void setPeriodEnd(long m)			{ iEnd = m;}}