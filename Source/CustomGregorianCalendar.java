//	CustomGregorianCalendar.java - Add functionality to java.util.GregorianCalendar.import java.util.Calendar;import java.util.GregorianCalendar;class CustomGregorianCalendar extends GregorianCalendar {    	//	Constructor to built with default values.	CustomGregorianCalendar(){		super();	}	//	Constructor to build from another GregorialCalendar.	CustomGregorianCalendar(GregorianCalendar other){		this();		this.setTime(other.getTime());	}	//	Override setTimeInMillis() just to make it public.	public void setTimeInMillis( long millis ) {		super.setTimeInMillis(millis);	}	//	Override getTimeInMillis() just to make it public.	public long getTimeInMillis() {		return super.getTimeInMillis();	}	 //	"Snap" a time value to the nearest whole unit.	public void roundToNearest(int targetUnit){		this.truncateOrRound(targetUnit, true);	}	//	"Truncate a time value to the next lower whole unit.	public void truncateToLower(int targetUnit){	 	this.truncateOrRound(targetUnit, false);	}	//	Implement roundToNearest() and truncateToLower(). 	protected void truncateOrRound(int targetUnit, boolean round){    	    	//	Determine the next-smaller unit, in which we'll work to determine the direction of rounding.	    	//	??	This should be an array lookup, for both clarity and speed.	    	int targetUnitField;	    	int nextSmallerField;		switch (targetUnit){			case TimeUnit.YEAR:				targetUnitField = Calendar.YEAR;				nextSmallerField = Calendar.MONTH;				break;							case TimeUnit.MONTH:				targetUnitField = Calendar.MONTH;				nextSmallerField = Calendar.DAY_OF_MONTH;				break;							case TimeUnit.WEEK:				targetUnitField = Calendar.WEEK_OF_YEAR;				nextSmallerField = Calendar.DAY_OF_WEEK;				break;							case TimeUnit.DAY:				targetUnitField = Calendar.DAY_OF_MONTH;				nextSmallerField = Calendar.HOUR_OF_DAY;				break;							case TimeUnit.HOUR:				targetUnitField = Calendar.HOUR_OF_DAY;				nextSmallerField = Calendar.MINUTE;				break;							case TimeUnit.MINUTE:				targetUnitField = Calendar.MINUTE;				nextSmallerField = Calendar.SECOND;				break;							case TimeUnit.SECOND:			default:								//	Just to make compiler happy				targetUnitField = Calendar.SECOND;				nextSmallerField = Calendar.MILLISECOND;				break;			}				    	if (round){	    			    	//	Determine the current value of this field, as well as its minimum and maximum values.		    	//	??	We're glossing over the fact that the maximum can vary;  i.e., number of days in month.		    	//	??	This is only relevant if the current value is close to the middle.		    	int minimum = this.getMinimum(nextSmallerField);		    	int current = this.get(nextSmallerField);		       	int maximum = this.getMaximum(nextSmallerField);		       			       	//	Decide whether to round up or down.		       	if ((current - minimum) >= (maximum - minimum)/2){		       			       		//	Round up.		       		this.add(targetUnitField, 1);		       	}		}		  			 	//	Clear the time fields smaller than the target unit.	 	//	Note all of the fall-thru's!!!		switch (nextSmallerField){			case Calendar.MONTH:	 	     		this.set(Calendar.MONTH, this.getMinimum(Calendar.MONTH));							case Calendar.DAY_OF_MONTH:	 	     		this.set(Calendar.DAY_OF_MONTH, this.getMinimum(Calendar.DAY_OF_MONTH));							//	This case is special, because weeks are not cleanly contained in months or years.			//	Thus, we only reset this field if we're starting with it (we're not resetting DAY_OF_MONTH			//	or MONTH).  If we do reset this field, we also have to clear DAY_OF_MONTH, so that 			//	java.util.GregorianCalendar determines the time by MONTH & WEEK_OF_MONTH &			//	DAY_OF_WEEK--See the "inconsistent information" section in the java.util.Calendar			//	 class description.			//	??	Bug fix - The 1.1.6 version of GregorianCalendar only looks at the stamp on			//	??	WEEK_OF_MONTH--it ignores the stamp of DAY_OF_WEEK.  To work around this,			//	??	set WEEK_OF_MONTH to what it already was.  Use internalGet() because we don't			//	??	want to trigger a call to computeTime() until we've set all fields.			case Calendar.DAY_OF_WEEK:				if (nextSmallerField == Calendar.DAY_OF_WEEK){					this.clear(Calendar.DAY_OF_MONTH);	 	     			this.set(Calendar.DAY_OF_WEEK, this.getMinimum(Calendar.DAY_OF_WEEK));	 	     			this.set(Calendar.WEEK_OF_MONTH, this.internalGet(Calendar.WEEK_OF_MONTH));	 	     		}							case Calendar.HOUR_OF_DAY:	 	     		this.set(Calendar.HOUR_OF_DAY, this.getMinimum(Calendar.HOUR_OF_DAY));							case Calendar.MINUTE:	 	     		this.set(Calendar.MINUTE, this.getMinimum(Calendar.MINUTE));							case Calendar.SECOND:	 	     		this.set(Calendar.SECOND, this.getMinimum(Calendar.SECOND));							case Calendar.MILLISECOND:			default:	 	     		this.set(Calendar.MILLISECOND, this.getMinimum(Calendar.MILLISECOND));		}	}	}